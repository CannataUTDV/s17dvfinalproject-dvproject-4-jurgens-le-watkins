A.`B01001_047`,
A.`B01001_048`,
A.`B01001_049`,
B.`B19001_002`,
B.`B19001_003`,
B.`B19001_004`,
B.`B19001_005`,
B.`B19001_006`,
B.`B19001_007`,
B.`B19001_008`,
B.`B19001_009`,
B.`B19001_010`,
B.`B19001_011`,
B.`B19001_012`,
B.`B19001_013`,
B.`B19001_014`,
B.`B19001_015`,
B.`B19001_016`,
B.`B19001_017`
from `uscensusbureau`.`acs-2015-5-e-agesex`.`USA_All_States` as A,
`uscensusbureau`.`acs-2015-5-e-income`.`USA_All_States` as B
where A.AreaName = B.AreaName"
)
df1Second <- data.world::query(connection = conn,
type = "sql",
dataset = "thule179/s-17-dv-final-project",
"select
C.`Population (2010 Est.)`,
C.`Population % of USA`,
C.`Internet users June, 2010`,
C.`Internet Penetration`,
C.`Facebook users August, 2010`,
C.`Facebook Penetration`
from Facebook as C")
df_InternetConnectivity <- data.world::query(connection = conn, type = "sql",
dataset = "thule179/s-17-dv-final-project",
"SELECT c.State as State, `Internet Connectivity`.`No connection anywhere (%)` as NoConnectionAnywhere, `Internet Connectivity`.`No home connection, but connect elsewhere (%)`
as NoHomeConnection_ConnectElseWhere, `Internet Connectivity`.`Connect at home only (%)` as ConnectAtHomeOnly,
InternetUsageAtHome.`Internet Usage At Home` as InternetUsageAtHome, InternetUsageAtWork.`Internet Usage At Work` as InternetUsageAtWork,
InternetUsageAtCoffeeShops.InternetUsageAtCoffeeShops as InternetUsageAtCoffeeShops,
InternetUsage.InternetUsage as InternetUsage
FROM `Internet Connectivity.xlsx/Internet Connectivity`as c, `Internet Connectivity.xlsx/InternetUsageAtHome` as h,
InternetUsageAtCoffeeShops as s, InternetUsageAtWork as w, InternetUsage as i
where c.State = h.State and s.State = h.State and h.State = w.State and w.State = i.State")
#df_InternetConnectivity <- data.frame(InternetConnectivity, stringsAsFactors=F)
# Put males into age categories
male0to9 <- df1$B01001_003 + df1$B01001_004
male10to19 <- df1$B01001_005 + df1$B01001_006 + df1$B01001_007
male20to29 <- df1$B01001_008 + df1$B01001_009 + df1$B01001_010 + df1$B01001_011
male30to39 <- df1$B01001_012 + df1$B01001_013
male40to49 <- df1$B01001_014 + df1$B01001_015
male50to59 <- df1$B01001_016 + df1$B01001_017
male60to69 <- df1$B01001_018 + df1$B01001_019 + df1$B01001_020 + df1$B01001_021
male70to79 <- df1$B01001_022 + df1$B01001_023
male80andUp <- df1$B01001_024 + df1$B01001_025
# Put females into age categories
female0to9 <- df1$B01001_027 + df1$B01001_028
female10to19 <- df1$B01001_029 + df1$B01001_030 + df1$B01001_031
female20to29 <- df1$B01001_032 + df1$B01001_033 + df1$B01001_034 + df1$B01001_035
female30to39 <- df1$B01001_036 + df1$B01001_037
female40to49 <- df1$B01001_038 + df1$B01001_039
female50to59 <- df1$B01001_040 + df1$B01001_041
female60to69 <- df1$B01001_042 + df1$B01001_043 + df1$B01001_044 + df1$B01001_045
female70to79 <- df1$B01001_046 + df1$B01001_047
female80andUp <- df1$B01001_048 + df1$B01001_049
# Group income into categories
TenToThirtyK <- df1$B19001_002 + df1$B19001_003 + df1$B19001_004 + df1$B19001_005 + df1$B19001_006
ThirtyToFiftyK <- df1$B19001_007 + df1$B19001_008 + df1$B19001_009 + df1$B19001_010
FiftyToHundredK <- df1$B19001_011 + df1$B19001_012 + df1$B19001_013
HundredToHundredFiftyK <- df1$B19001_014 + df1$B19001_015
HundredFiftyPlus <- df1$B19001_016 + df1$B19001_017
# Bind all the categories into a data frame
df2 <- as.data.frame(cbind(State = df1$AreaName, TotalPopulation = df1$B01001_001, male0to9, male10to19, male20to29, male30to39, male40to49, male50to59, male60to69, male70to79, male80andUp, female0to9, female10to19, female20to29, female30to39, female40to49, female50to59, female60to69, female70to79, female80andUp, TenToThirtyK, ThirtyToFiftyK, FiftyToHundredK, HundredToHundredFiftyK, HundredFiftyPlus), stringsAsFactors = FALSE)
# Change the numeric columns to numeric.
df2[-1] <- as.data.frame(apply(df2[-1], 2, as.numeric))
df2 <- cbind(df2, df1Second)
# Do an inner join by State of df2 and InternetConnectivity
df2 <- merge(df2,df_InternetConnectivity, by ="State")
as.numeric(as.character(df2$InternetUsage))
as.numeric(as.character(1:df2$InternetUsage))
as.numeric(as.character(df2$InternetUsage))
InternetUsage_2 <- df2$InternetUsage
as.numeric(InternetUsage_2)
usage_c <- c(df2$InternetUsage)
print(usgae_c)
print(usage_c)
df2 <-df2(na.strings="\n")
df2 <-data.frame(df2,na.strings="\n")
as.numeric(df2$InternetUsage)
df2 <-data.frame(df2,na.strings="\n")
as.numeric(df2$InternetUsage)
df2[,'InternetUsage'] <- gsub(",","",df2[,'InternetUsage'])
View(df2)
View(df2)
df2[,'InternetUsage'] <- gsub("\n","",df2[,'InternetUsage'])
as.numeric(df2$InternetUsage)
df2$InternetUsage <- as.numeric(df2$InternetUsage)
# get average internet usage per person for each State
df2$Avg_InternetUsage <- df2$InternetUsage
df2$Avg_InternetUsage <- df2$InternetUsage / df2$TotalPopulation
# Find high, medium, and low ranges of Internet Usage
sorted_df2 <- df2[order(df2$Avg_InternetUsage),] # sort df2 from lowest to highest
low_range <- c(sorted_df2$Avg_InternetUsage[c(0: (51/3))]) # subset states with low Internet Usage
medium_range <- c(sorted_df2$Avg_InternetUsage[c((51/3): (2*51/3))]) # subset states with medium Internet Usage
high_range <- c(sorted_df2$Avg_InternetUsage[c((2*51/3) : 51)]) # subset states with high Internet Usage
# Create column for Internet Usage Levels
df2$InternetUsageLevel <- df2$InternetUsage
# Go through internet usage for each state and determine their usage level
for (i in 1:nrow(df2)){
if (df2$Avg_InternetUsage[i] %in% low_range){
df2$InternetUsageLevel[i] = "Low"
}
else if (df2$Avg_InternetUsage[i] %in% medium_range){
df2$InternetUsageLevel[i] = "Medium"
}
else if (df2$Avg_InternetUsage[i] %in% high_range){
df2$InternetUsageLevel[i] = "High"
}
}
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/01 Data/ETL.R')
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/00 Doc/RobertBoxplots.R')
require(ggplot2)
require(tidyr)
require(plotly)
# Set working directory to 00 Doc
source("../01 Data/ETL.R")
# Boxplot 1 #
df3 <- data.frame(df2$State, df2$male0to9, df2$male10to19, df2$male20to29, df2$male30to39, df2$male40to49, df2$male50to59, df2$male60to69, df2$male70to79, df2$male80andUp)
df3 <- tidyr::gather(df3, ageGroup, number, 2:10)
p1 <- ggplot(df3, aes(x = ageGroup, y = number, color = ageGroup)) + geom_boxplot()
ggplotly(p1)
# Boxplot 2 #
df4 <- data.frame(df2$InternetUsageAtHome, df2$InternetUsageAtWork, df2$InternetUsageAtCoffeeShops)
df4 <- tidyr::gather(df4, Usage, number, 1:3)
p2 <- ggplot(df4, aes(x = Usage, y = sqrt(number), color = Usage)) + geom_boxplot()
ggplotly(p2)
# Boxplot 3 #
df5 <- data.frame(df2$TenToThirtyK, df2$ThirtyToFiftyK, df2$FiftyToHundredK, df2$HundredToHundredFiftyK, df2$HundredFiftyPlus)
df5 <- tidyr::gather(df5, Income, number, 1:5)
df5$Income <- factor(df5$Income, levels = c("df2.TenToThirtyK", "df2.ThirtyToFiftyK", "df2.FiftyToHundredK", "df2.HundredToHundredFiftyK", "df2.HundredFiftyPlus"))
p3 <- ggplot(df5, aes(x = Income, y = log(number), color = Income)) + geom_boxplot()
## TODO : Would like to add State to hover info on these box plots!
View(df5)
View(df5)
df3 <- data.frame(df2$State, df2$male0to9, df2$male10to19, df2$male20to29, df2$male30to39, df2$male40to49, df2$male50to59, df2$male60to69, df2$male70to79, df2$male80andUp)
df3 <- tidyr::gather(df3, ageGroup, number, 2:10)
p1 <- ggplot(df3, aes(x = ageGroup, y = number, color = ageGroup)) + geom_boxplot()
ggplotly(p1)
df4 <- data.frame(df2$InternetUsageAtHome, df2$InternetUsageAtWork, df2$InternetUsageAtCoffeeShops)
df4 <- tidyr::gather(df4, Usage, number, 1:3)
p2 <- ggplot(df4, aes(x = Usage, y = sqrt(number), color = Usage)) + geom_boxplot()
ggplotly(p2)
View(df4)
View(df4)
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/00 Doc/RobertChoroplethr.R')
setwd("~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/00 Doc")
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/00 Doc/RobertChoroplethr.R')
View(df2)
View(df2)
df3 <- data.frame(state = df2$State, interaction(df2$InternetUsageAtHomeLevel, df2$InternetUsageAtWorkLevel))
names(df3) <- c("region", "value")
df3$value <- factor(df3$value, levels = c("Low.Low", "Low.Medium", "Low.High", "Medium.Low", "Medium.Medium", "Medium.High", "High.Low", "High.Medium", "High.High"))
df3$region <- tolower(df3$region)
data("continental_us_states")
c1 <- state_choropleth(df3,
zoom = continental_us_states)
c1 + scale_fill_brewer(type = "seq", palette = 12)
# Map 2 #
df4 <- data.frame(state = df2$State, Young = interaction(df2$InternetUsageLevel, df2$YoungCategories))
names(df4) <- c("region", "value")
df4$value <- factor(df4$value)
df4$region <- tolower(df4$region)
c2 <- state_choropleth(df4,
zoom = continental_us_states)
c2
df3 <- data.frame(state = df2$State, interaction(df2$InternetUsageAtHomeLevel, df2$InternetUsageAtWorkLevel))
names(df3) <- c("region", "value")
df3$value <- factor(df3$value, levels = c("Low.Low", "Low.Medium", "Low.High", "Medium.Low", "Medium.Medium", "Medium.High", "High.Low", "High.Medium", "High.High"))
df3$region <- tolower(df3$region)
data("continental_us_states")
c1 <- state_choropleth(df3,
zoom = continental_us_states)
c1 + scale_fill_brewer(type = "seq", palette = 12)
# Map 2 #
df4 <- data.frame(state = df2$State, Young = interaction(df2$InternetUsageLevel, df2$YoungCategories))
names(df4) <- c("region", "value")
df4$value <- factor(df4$value)
df4$region <- tolower(df4$region)
c2 <- state_choropleth(df4,
zoom = continental_us_states)
c2
data("continental_us_states")
df <- df2[order(df2$TotalPopulation),]
View(df)
View(df)
df <- df[1:10,]
df <- df%>%select(State,TotalPopulation,NoConnectionAnywhere,NoHomeConnection_ConnectElseWhere,ConnectAtHomeOnly)
df <- df[1:10,]
df <- df[1:6,]
View(df)
View(df)
x <- c(df[,3:5])
print(x)
p <- df%>%count(x, NoConnectionAnywhere)%>%plot_ly(x = ~x, y = ~n, color = ~State)
p <- df%>%count(State, NoConnectionAnywhere)%>%plot_ly(x = ~x, y = ~n, color = ~State)
p
df3 <- df%>%gather("Connection",1:5)
View(df3)
View(df3)
require(plotly)
require(dplyr)
require(tidyr)
require(ggplot2)
# Set working directory to 00 Doc.
source("../01 Data/ETL.R")
# select top 6 States by Population
df <- df2[order(df2$TotalPopulation),]
df <- df[1:6,]
df <- df%>%select(State,TotalPopulation,NoConnectionAnywhere,NoHomeConnection_ConnectElseWhere,ConnectAtHomeOnly)
df3 <- df%>%gather("Connection",1:5)
df3 <- df%>%gather("Connection",State,1:5)
df <- df%>%select(State,TotalPopulation,NoConnectionAnywhere,NoHomeConnection_ConnectElseWhere,ConnectAtHomeOnly)
df3 <- df%>%gather("Connection",-State,1:5)
df3 <- df%>%gather("Connection",1:5,-State,-TotalPopulation)
df3 <- df%>%gather("Connection",State,3:5,-TotalPopulation)
df <- df%>%select(State,TotalPopulation,NoConnectionAnywhere,NoHomeConnection_ConnectElseWhere,ConnectAtHomeOnly)
df3 <- df%>%gather("Connection",State,3:5,-TotalPopulation)
df <- df%>%select(State,TotalPopulation,NoConnectionAnywhere,NoHomeConnection_ConnectElseWhere,ConnectAtHomeOnly)
df3 <- df%>%gather("Connection",Connection_Percentage,3:5,-TotalPopulation)
df <- df%>%gather("Connection",Connection_Percentage,3:5,-TotalPopulation)
View(df)
View(df)
p <- df%>%count(Connection, Connection_Percentage)%>%plot_ly(x = ~Connection, y = ~n, color = ~State)
p
p <- df%>%count(Connection, Connection_Percentage)%>%plot_ly(x = ~Connection, y = ~n, color = ~df$State)
p
p <- df%>%count(Connection, Connection_Percentage)%>%plot_ly(x = Connection, y = n, color = ~df$State)
p <- df%>%count(Connection, Connection_Percentage)%>%plot_ly(x = df$Connection, y = n, color = ~df$State)
p
x <- c("NoConnectionAnywhere","NoHomeConnection_ConnectElseWhere","ConnectAtHomeOnly")
p <- plot_ly(x = df$Connection, y = n, color = ~df$State)
p
p <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)
p
require(RColorBrewer)
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State, marker = list(color = colorRampPalette(brewer.pal(11,"Spectral"))(100)))
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State, marker = list(color = colorRampPalette(brewer.pal(11,"Spectral"))))
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State, marker = list(color = brewer.pal(11,"Spectral")))
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)
plot1
plot1 <- plot_ly(x = df$Connection, y = paste(df$Connection_Percentage,"%"), color = ~df$State)
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)%>%layout(xaxis = Connectivity, yaxis = Percentage,title = "Connectivity of the top 6 States by Population")
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)%>%layout(xaxis = "Connectivity", yaxis = Percentage,title = "Connectivity of the top 6 States by Population")
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)%>%layout(xaxis = "Connectivity", yaxis = "Percentage",title = "Connectivity of the top 6 States by Population")
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)%>%layout(xaxis = "Connectivity", yaxis = "Percentage",title = "Connectivity of the top 6 States by Population")
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)%>%layout( title = "Connectivity of the top 6 States by Population",xaxis = "Connectivity", yaxis = "Percentage")
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)%>%layout( title = "Connectivity of the top 6 States by Population")
plot1
plot1 <- plot_ly(x = df$Connection, y = df$Connection_Percentage, color = ~df$State)%>%layout( title = "Top 6 States Average Connectivity")
plot1
shiny::runApp('~/GitHub/s17dvproject5-dvproject-4-jurgens-le-watkins-1/02 Shiny')
runApp('~/GitHub/s17dvproject6-dvproject-4-jurgens-le-watkins/02 Shiny')
require(plotly)
require(dplyr)
require(tidyr)
require(RColorBrewer)
# Set working directory to 00 Doc.
source("../01 Data/ETL.R")
# plot #1 - top 6 states by population and internet connectivity
# select top 6 States by Population
df <- df2[order(df2$TotalPopulation),]
df <- df%>%select(State,TotalPopulation,NoConnectionAnywhere,NoHomeConnection_ConnectElseWhere,ConnectAtHomeOnly)
df_top <- df[1:6,]
df_top <- df_top%>%gather("Connection",Connection_Percentage,3:5,-TotalPopulation)
x <- c("NoConnectionAnywhere","NoHomeConnection_ConnectElseWhere","ConnectAtHomeOnly")
plot1 <- plot_ly(x = df_top$Connection, y = df_top$Connection_Percentage, color = ~df$State)%>%layout( title = "Top 6 States Average Connectivity")
plot1
df_all <- df%>%gather("Connection", Connection_Percentage,3:5,-TotalPopulation)
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black", position = "dodge") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 6)) + facet_wrap(~State) + geom_hline(aes(yintercept = avgN), color = "red") + scale_y_log10(labels = comma) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="Spectral")
df3 <- data.frame(df2$State, df2$male0to9, df2$male10to19, df2$male20to29, df2$male30to39, df2$male40to49, df2$male50to59, df2$male60to69, df2$male70to79, df2$male80andUp)
df3 <- tidyr::gather(df3, ageGroup, number, 2:10)
p1 <- ggplot(df3, aes(x = ageGroup, y = number, color = ageGroup)) + geom_boxplot()
ggplotly(p1)
View(df3)
View(df3)
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black", position = "dodge") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 6)) + facet_wrap(~State) + geom_hline(aes(yintercept = avgN), color = "red") + scale_y_log10(labels = comma) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="Spectral")
df_all <- df%>%gather("Connection", Connection_Percentage,3:5,-TotalPopulation)
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black", position = "dodge") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 6)) + facet_wrap(~State) + geom_hline(aes(yintercept = avgN), color = "red") + scale_y_log10(labels = comma) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="Spectral")
plot2
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black", position = "dodge") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 6)) + facet_wrap(~State) + geom_hline(aes(yintercept = Connection_Percentage), color = "red") + scale_y_log10(labels = comma) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="Spectral")
plot2
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black", position = "dodge") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 6)) + facet_wrap(~State) + geom_hline(aes(yintercept = Connection_Percentage), color = "red") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="Spectral")
plot2
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black", position = "dodge") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 3)) + facet_wrap(~State) + geom_hline(aes(yintercept = Connection_Percentage), color = "red") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="Spectral")
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 3)) + facet_wrap(~State) + geom_hline(aes(yintercept = Connection_Percentage), color = "red") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="Spectral")
plot2
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 3)) + facet_wrap(~State) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="Spectral")
plot2
plot2 <- ggplot(df_all,aes(x = Connection, y = Connection_Percentage, fill = Connection)) + geom_bar(stat = "identity", color = "black") + coord_flip() + labs(y = "Connectivity", x = "State", color = "Percentage") + theme(axis.text = element_text(size = 3)) + facet_wrap(~State) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_fill_brewer(palette="RdPu")
plot2
View(df2)
View(df2)
TotalPopulation <- sum(df2$TotalPopulation)
df_AllStates <- data.frame(TotalPopulation,TotalTenToThirtyK,TotalThirtyToFiftyK,TotalFiftyToHundredK,TotalHundredToHundredFiftyK,TotalHundredFiftyPlus)
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/00 Doc/ThuAreaChart.R')
View(df_AllStates)
View(df_AllStates)
plot <- ggplot(dt, aes(x= df2$NoConnectionAnywhere, size = x, color = df2$State)) + geom_point()
ggplotly()
plot <- ggplot(dt, aes(df2$NoConnectionAnywhere,df$State, size = x, color = df2$State)) + geom_point()
ggplotly()
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/00 Doc/ThuAreaChart.R')
plot <- ggplot(dt, aes(df2$NoConnectionAnywhere,df$State, size = x, color = df2$State)) + geom_point()
ggplotly()
plot
plot <- ggplot(dt, aes(df2$NoConnectionAnywhere,df$State, size = x, color = df2$State)) + geom_point()
plot
ggplotly()
plot <- ggplot(dt, aes(y=df2$NoConnectionAnywhere, size = x, color = df2$State)) + geom_point()
ggplotly()
plot
plot <- ggplot(dt, aes(x=df2$NoConnectionAnywhere, y=df2$NoConnectionAnywhere, size = x, color = df2$State)) + geom_point()
ggplotly()
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/00 Doc/LoganPlot3.R')
ggplotly(plotThing)
All_Income <- df1$B19001_001
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/01 Data/ETL.R')
View(df2)
View(df2)
df2 <- as.data.frame(cbind(State = df1$AreaName, TotalPopulation = df1$B01001_001, male0to9, male10to19, male20to29, male30to39, male40to49, male50to59, male60to69, male70to79, male80andUp, female0to9, female10to19, female20to29, female30to39, female40to49, female50to59, female60to69, female70to79, female80andUp, All_Income,TenToThirtyK, ThirtyToFiftyK, FiftyToHundredK, HundredToHundredFiftyK, HundredFiftyPlus), stringsAsFactors = FALSE)
df2 <- cbind(df2, df1Second)
View(df2)
View(df2)
df2
df2 <- as.data.frame(cbind(State = df1$AreaName, TotalPopulation = df1$B01001_001, male0to9, male10to19, male20to29, male30to39, male40to49, male50to59, male60to69, male70to79, male80andUp, female0to9, female10to19, female20to29, female30to39, female40to49, female50to59, female60to69, female70to79, female80andUp, All_Income,TenToThirtyK, ThirtyToFiftyK, FiftyToHundredK, HundredToHundredFiftyK, HundredFiftyPlus), stringsAsFactors = FALSE)
df2[-1] <- as.data.frame(apply(df2[-1], 2, as.numeric))
df2 <- cbind(df2, df1Second)
# Do an inner join by State of df2 and InternetConnectivity
df2 <- merge(df2,df_InternetConnectivity, by ="State")
All_Income <- df1$B19001_001
All_Income <- df1$B19001_001
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/01 Data/ETL.R')
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/01 Data/ETL.R')
df2$Avg_Income <-  df2$All_Income / df2$TotalPopulation
Agg_Income <- df1$B19062_001
df2$Avg_Income <-  df2$Agg_Income / df2$TotalPopulation
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/01 Data/ETL.R')
View(df2)
View(df2)
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/01 Data/ETL.R')
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/01 Data/ETL.R')
View(df2)
View(df2)
bubble <- symbols(df2$PerCapitaIncome, circles=df2$PerCapitaIncome, inches=0.35, fg="white", bg="red", xlab="Murder Rate")
bubble
p <- ggplot(df2, aes(df2$PerCapitaIncome,df2$PerCapitaIncome,label= df2$State,size=df2$PerCapitaIncome))
p <- p+geom_point(colour="red") +scale_area(to=c(1,20))+geom_text(size=3)
p + xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
p <- ggplot(df2, aes(df2$PerCapitaIncome,df2$PerCapitaIncome,label= df2$State,size=df2$PerCapitaIncome))
p <- ggplot( aes(df2$PerCapitaIncome,df2$PerCapitaIncome,label= df2$State,size=df2$PerCapitaIncome))
library(plotly)
library(RColorBrewer)
library(ggplot2)
source("../01 Data/ETL.R")
p <- ggplot(df2, aes(df2$PerCapitaIncome,df2$PerCapitaIncome,label= df2$State,size=df2$PerCapitaIncome))
p <- p+geom_point(colour="red") +scale_area(to=c(1,20))+geom_text(size=3)
p + xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
p <- ggplot(df2, aes(df2$PerCapitaIncome, label= df2$State,size=df2$PerCapitaIncome))
source('~/GitHub/s17dvfinalproject-dvproject-4-jurgens-le-watkins/00 Doc/ThuBubbleChart.R')
p <- ggplot(df2, aes(df2$PerCapitaIncome, label= df2$State,size=df2$PerCapitaIncome))
p <- p+geom_point(colour="red") +geom_text(size=3)
p + xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
p <- ggplot(df2, aes(df2$PerCapitaIncome,df2$PerCapitaIncome, label= df2$State,size=df2$PerCapitaIncome))
p <- p+geom_point(colour="red") +geom_text(size=3)
p + xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
p <- ggplot(df2, aes(x= df2$PerCapitaIncome,y= df2$Avg_InternetUsage, label= df2$State,size=df2$PerCapitaIncome))
p <- p+geom_point(colour="red") +geom_text(size=3)
p + xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
p <- ggplot(df2, aes(x= df2$PerCapitaIncome,y= df2$Avg_InternetUsage,size=df2$TotalPopulation))
p <- p+geom_point(colour="red") +geom_text(size=3)
p + xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
p <- ggplot(df2, aes(x= df2$PerCapitaIncome,y= df2$Avg_InternetUsage,size=df2$TotalPopulation))
p
p <- plot_ly(df2, x = ~df2$PerCapitaIncome, y = ~df2$Avg_InternetUsage, text = ~df2$State, type = 'scatter', mode = 'markers', color = ~df2$State, colors = 'Reds',
marker = list(size = ~df2$PerCapitaIncome, opacity = 0.5)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
p
p <- plot_ly(df2, x = ~list(df2$PerCapitaIncome), y = ~list(df2$Avg_InternetUsage), text = ~df2$State, type = 'scatter', mode = 'markers', color = ~df2$State, colors = 'Reds',
marker = list(size = ~df2$PerCapitaIncome, opacity = 0.5)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
p
p <- plot_ly(df2, x = ~list(df2$PerCapitaIncome), y = ~list(df2$Avg_InternetUsage), text = ~df2$State, type = 'scatter', mode = 'markers', color = ~df2$State,
marker = list(size = ~df2$PerCapitaIncome, opacity = 0.5)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
p
p <- plot_ly(df2, x = df2$PerCapitaIncome, y = df2$Avg_InternetUsage, text = ~df2$State, type = 'scatter', mode = 'markers', color = ~df2$State,
marker = list(size = ~df2$PerCapitaIncome, opacity = 0.5)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
p
p <- plot_ly(df2, x = ~df2$PerCapitaIncome, y = ~df2$Avg_InternetUsage, text = ~df2$State, type = 'scatter', mode = 'markers', size = ~df2$PerCapitaIncome, color = ~State, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
p <- plot_ly(df2, x = ~df2$PerCapitaIncome, y = ~df2$Avg_InternetUsage, text = ~df2$State, type = 'scatter', mode = 'markers', size = ~df2$PerCapitaIncome, color = ~State, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Per Capita Income and Average Internet Usage By State',
xaxis = list(showgrid = TRUE),
yaxis = list(showgrid = True),
showlegend = TRUE)
p
p <- plot_ly(df2, x = ~df2$PerCapitaIncome, y = ~df2$Avg_InternetUsage, text = ~df2$State, type = 'scatter', mode = 'markers', size = ~df2$PerCapitaIncome, color = ~State, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Per Capita Income and Average Internet Usage By State',
xaxis = list(showgrid = TRUE),
yaxis = list(showgrid = TRUE),
showlegend = TRUE)
p
p <- plot_ly(df2, x = ~df2$PerCapitaIncome, y = ~df2$Avg_InternetUsage, text = ~df2$State, type = 'scatter', mode = 'markers', size = ~df2$PerCapitaIncome, color = ~State, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Per Capita Income and Average Internet Usage By State',
xaxis = list(showgrid = TRUE),
yaxis = list(showgrid = TRUE),
showlegend = FALSE)
p
p <- plot_ly(df2, x = ~df2$PerCapitaIncome, y = ~df2$Avg_InternetUsage, text = ~df2$State, type = 'scatter', mode = 'markers', size = ~df2$PerCapitaIncome, color = ~State, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Per Capita Income and Average Internet Usage By State',
xaxis = list(showgrid = TRUE, text = "Average Internet Usage"),
yaxis = list(showgrid = TRUE, text = "Per CapitaI ncome"),
showlegend = FALSE)
p
p <- plot_ly(df2, x = ~df2$PerCapitaIncome, y = ~df2$Avg_InternetUsage, text = ~df2$State, type = 'scatter', mode = 'markers', size = ~df2$PerCapitaIncome, color = ~State, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Per Capita Income and Average Internet Usage By State',
xaxis = list(showgrid = TRUE, title = "Average Internet Usage"),
yaxis = list(showgrid = TRUE, title = "Per CapitaI ncome"),
showlegend = FALSE)
p
df3 <- df2%>%select(State,InternetUsage)
df3$InternetUsage_new <-  round((df3$InternetUsage - mean(df3$InternetUsage))/sd(df3$InternetUsage), 2)  # compute normalized Internet Usage
df3$InternetUsage_z <-  round((df3$InternetUsage - mean(df3$InternetUsage))/sd(df3$InternetUsage), 2)  # compute normalized Internet Usage
df3 <- df2%>%select(State,InternetUsage)
df3$InternetUsage_z <-  round((df3$InternetUsage - mean(df3$InternetUsage))/sd(df3$InternetUsage), 2)  # compute normalized Internet Usage
df3$InternetUsage_type <- ifelse(df3$InternetUsage_z < 0, "below", "above")  # above / below avg flag
df3 <- df3[order(df3$InternetUsage_z), ]  # sort
df3$State <- factor(df3$State, levels = df3$State)
InternetUsage_bar <- ggplot(df3, aes(x=State, y=InternetUsage_z, label=InternetUsage_z)) + geom_bar(stat='identity', aes(fill=InternetUsage_type), width=.5)  +scale_fill_manual(name="Internet Usage", labels = c("Above Average", "Below Average"), values = c("above"="#00ba38", "below"="#f8766d")) + coord_flip()
InternetUsage_bar
df4 <- df2%>%select(State,YoungProportion)
df4$YoungPeople_z <-  round((df4$YoungProportion - mean(df4$YoungProportion))/sd(df4$YoungProportion), 2)  # compute normalized Young Proportion
df4$YoungPeople_type <- ifelse(df4$YoungPeople_z < 0, "below", "above")  # above / below avg flag
df4 <- df3[order(df4$YoungPeople_z), ]  # sort
df4$State <- factor(df4$State, levels = df3$State)
YoungPeople_bar <- ggplot(df4, aes(x=State, y=YoungPeople_z, label=YoungPeople_z)) + geom_bar(stat='identity', aes(fill=YoungPeople_type), width=.5)  +scale_fill_manual(name="Internet Usage", labels = c("Above Average", "Below Average"), values = c("above"="#00ba38", "below"="#f8766d")) + coord_flip()
YoungPeople_bar
df4 <- df2%>%select(State,YoungProportion)
df4$YoungPeople_z <-  round((df4$YoungProportion - mean(df4$YoungProportion))/sd(df4$YoungProportion), 2)  # compute normalized Young Proportion
df4$YoungPeople_type <- ifelse(df4$YoungPeople_z < 0, "below", "above")  # above / below avg flag
df4 <- df3[order(df4$YoungPeople_z), ]  # sort
df4$State <- factor(df4$State, levels = df3$State)
YoungPeople_bar <- ggplot(df4, aes(x=State, y=YoungPeople_z, label=YoungPeople_z)) + geom_bar(stat='identity', aes(fill=YoungPeople_type), width=.5)  +scale_fill_manual(name="You Proportion", labels = c("Above Average", "Below Average"), values = c("above"="#00ba38", "below"="#f8766d")) + coord_flip()
YoungPeople_bar
View(df2)
View(df2)
df4$YoungPeople_z <-  round((df4$YoungProportion - mean(df4$YoungProportion))/sd(df4$YoungProportion), 2)  # compute normalized Young Proportion
df4 <- df2%>%select(State,YoungProportion)
View(df4)
View(df4)
df4$YoungPeople_z <-  round((df4$YoungProportion - mean(df4$YoungProportion))/sd(df4$YoungProportion), 2)  # compute normalized Young Proportion
df4$YoungPeople_type <- ifelse(df4$YoungPeople_z < 0, "below", "above")  # above / below avg flag
df4 <- df3[order(df4$YoungPeople_z), ]  # sort
df4 <- df2%>%select(State,YoungProportion)
df4$YoungPeople_z <-  round((df4$YoungProportion - mean(df4$YoungProportion))/sd(df4$YoungProportion), 2)  # compute normalized Young Proportion
df4$YoungPeople_type <- ifelse(df4$YoungPeople_z < 0, "below", "above")  # above / below avg flag
df4 <- df4[order(df4$YoungPeople_z), ]  # sort
df4$State <- factor(df4$State, levels = df3$State)
YoungPeople_bar <- ggplot(df4, aes(x=State, y=YoungPeople_z, label=YoungPeople_z)) + geom_bar(stat='identity', aes(fill=YoungPeople_type), width=.5)  +scale_fill_manual(name="You Proportion", labels = c("Above Average", "Below Average"), values = c("above"="#00ba38", "below"="#f8766d")) + coord_flip()
YoungPeople_bar
df4 <- df2%>%select(State,YoungProportion)
df4$YoungPeople_z <-  round((df4$YoungProportion - mean(df4$YoungProportion))/sd(df4$YoungProportion), 2)  # compute normalized Young Proportion
df4$YoungPeople_type <- ifelse(df4$YoungPeople_z < 0, "below", "above")  # above / below avg flag
df4 <- df4[order(df4$YoungPeople_z), ]  # sort
df4$State <- factor(df4$State, levels = df4$State)
YoungPeople_bar <- ggplot(df4, aes(x=State, y=YoungPeople_z, label=YoungPeople_z)) + geom_bar(stat='identity', aes(fill=YoungPeople_type), width=.5)  +scale_fill_manual(name="You Proportion", labels = c("Above Average", "Below Average"), values = c("above"="#00ba38", "below"="#f8766d")) + coord_flip()
YoungPeople_bar
df4 <- df2%>%select(State,YoungProportion)
df4$YoungPeople_z <-  round((df4$YoungProportion - mean(df4$YoungProportion))/sd(df4$YoungProportion), 2)  # compute normalized Young Proportion
df4$YoungPeople_type <- ifelse(df4$YoungPeople_z < 0, "below", "above")  # above / below avg flag
df4 <- df4[order(df4$YoungPeople_z), ]  # sort
df4$State <- factor(df4$State, levels = df4$State)
YoungPeople_bar <- ggplot(df4, aes(x=State, y=YoungPeople_z, label=YoungPeople_z)) + geom_bar(stat='identity', aes(fill=YoungPeople_type), width=.5)  +scale_fill_manual(name="Young Proportion", labels = c("Above Average", "Below Average"), values = c("above"="#00ba38", "below"="#f8766d")) + coord_flip()
YoungPeople_bar
